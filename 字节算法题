#一个浮点数组， 寻找间隔大于K的最大两个数之和

#O(n2)
def fn(a,k):
    if not a or k < 0: return 
    a_len = len(a)
    max_value = 0
    for i in range(a_len-k-1):
        for j in range(i+k+1,a_len):
            res = a[i]+a[j]
            max_value = res if res > max_value else max_value
    return max_value

#better
def fn2(a,k):
    if not a or k < 0: return 
    a_len = len(a)
    tmp,idx = a[0],0
    hashmap = {}
    for i in range(k+1,a_len):
        value = a[i] if a[i] > tmp else tmp
        key = i
        hashmap.update({key:value})
    sort_hashmap = sorted(hashmap.items(),key = lambda x:x[1], reverse = True)


    max_value = 0
    for i in range(a_len-k-1):
        for item in sort_hashmap:
            idx,value = item
            if abs(idx - i) > 2: 
                res = a[i] + value
                break
        max_value = res if res > max_value else max_value
    return max_value

a = [1,4,2,3,7,5,9,6,20]
res = fn2(a,2)
print(res)



## 标题：升序数组求平方数不同的个数

#给定一个升序数组1，元素有重复，对每个元素算一下平方后得到新的数组2，问数组2中不相同的元素共有多少个？给出算法和空间复杂度，要求尽量优化。 
#举例： 数组1 -13,-10,-9,-6,-5,-1,3,4,6,7,10,11,15,21,42 平方后得到 数组2 169,100,81,36,25,1,9,16,36,49,100,121,225,441,1764 其中不相同的元素个数为13个。
def f(a):
    if not a: return []
    a_len = len(a)
    if a_len < 2: return 1
    i,j = 0,a_len-1
    count = 0
    while i < j and i < a_len:
        if abs(a[i]) == abs(a[j]) and i < j:
            count += 1
            i += 1
            j -= 1
            while abs(a[i-1]) == abs(a[i]): i += 1
            while abs(a[j+1]) == abs(a[j]): j -= 1
        elif abs(a[i]) < abs(a[j]) and i < j:
            count += 1
            j -= 1
            while abs(a[j+1]) == abs(a[j]): j -= 1 
        else:
            count += 1
            i += 1
            while abs(a[i-1]) == abs(a[i]): i += 1
    if i == j : return count+1
    if i > j :return count

a = [-13,-10,-9,-6,-5,-1,3,4,6,7,10,11,15,21,42]
#a  = [1,2,3,4]
res = f(a)
print(res)
